input {
    tcp {
        port => 5000
        codec => json
    }
}

filter {
    # Mesajdaki özel karakterleri temizleyelim
    mutate {
        gsub => ["message", "\\\"", "\""]  # Kaçış karakteri olan tırnak işaretlerini temizle
        gsub => ["message", "\\\\", ""]    # Geri eğik çizgileri temizle
    }

    # JSON verisini parse et
    json {
        source => "message"
        target => "log_message"
        remove_field => ["message"]  # Eğer "message" alanı gerekmiyorsa, sil
    }

    # API Response'unun işlendiği alanları yeniden adlandıralım
    if [log_message][cardholderName] {
        mutate {
            rename => { "[log_message][cardholderName]" => "cardholder_name" }
        }
    }

    if [log_message][cardNumber] {
        mutate {
            rename => { "[log_message][cardNumber]" => "card_number" }
        }
    }

    if [log_message][expiryDate] {
        mutate {
            rename => { "[log_message][expiryDate]" => "expiry_date" }
        }
    }

    if [log_message][cvv] {
        mutate {
            rename => { "[log_message][cvv]" => "cvv" }
        }
    }

    if [log_message][cardType] {
        mutate {
            rename => { "[log_message][cardType]" => "card_type" }
        }
    }

    if [log_message][cardBrand] {
        mutate {
            rename => { "[log_message][cardBrand]" => "card_brand" }
        }
    }

    if [log_message][issueDate] {
        mutate {
            rename => { "[log_message][issueDate]" => "issue_date" }
        }
    }

    if [log_message][balance] {
        mutate {
            rename => { "[log_message][balance]" => "balance" }
        }
    }

    if [log_message][status] {
        mutate {
            rename => { "[log_message][status]" => "status" }
        }
    }

    if [log_message][updatedAt] {
        mutate {
            rename => { "[log_message][updatedAt]" => "updated_at" }
        }
    }

    if [log_message][createdAt] {
        mutate {
            rename => { "[log_message][createdAt]" => "created_at" }
        }
    }

    # Eğer "_jsonparsefailure" varsa, verinin hatalı olduğunu loglayalım
    if "_jsonparsefailure" in [tags] {
        mutate {
            add_field => { "error" => "JSON parsing failed for message" }
        }
    }
}

output {
    elasticsearch {
        hosts => ["http://elasticsearch:9200"]
        index => "logs-%{+YYYY.MM.dd}"
    }
    stdout { codec => rubydebug }
}

